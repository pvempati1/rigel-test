# Generated by Vitis, edit only the sections marked as USER SETTINGS
set(CMAKE_EXPORT_COMPILE_COMMANDS
ON
)
set(CMAKE_CXX_STANDARD
11
CACHE STRING
"The C++ standard to use"
)
set(CMAKE_CXX_STANDARD_REQUIRED
ON
)
set(CMAKE_CXX_EXTENSIONS
OFF
)
add_executable(copy_buffer "")



###    USER SETTINGS  START    ###
# Below settings can be customized

# Add any compiler definitions, they will be added as extra definitions
# Example adding VERBOSE=1 will pass -DVERBOSE=1 to the compiler.
set(USER_COMPILE_DEFINITIONS
""
)

# Add any compiler options, they will be added as extra compiler options
# Example adding -Wall , will pass -Wall to the compiler.
# Brief description of options which can be passed.
# To enable all warning pass -Wall
# To set optimizations   -O0 [None] , -O1 [Optimize] , -O2 [Optimize More], -O3 [Optimize Most] or -Os [Optimize Size]
# To enable profiling -pg [ for gprof ]  or -p [ for prof information ]
# To enable verbose -v
set(USER_COMPILE_OPTIONS
""
)


# Add any directories below, they will be added as extra include directories.
# Example 1: Adding /proj/data/include will pass -I/proj/data/include
# Example 2: Adding ../../common/include will consider the path as relative to this component directory.
# Example 3: Adding ${CMAKE_SOURCE_DIR}/data/include to add data/include from this project.

set(USER_INCLUDE_DIRECTORIES
""
)

# Add any libraries to be linked below, they will be added as extra libraries.

set(USER_LINK_LIBRARIES
""
)

# Add any directories to look for the libraries to be linked.
# Example 1: Adding /proj/compression/lib will pass -L/proj/compression/lib to the linker.
# Example adding Adding ../../common/lib will consider the path as relative to this directory. and will pass the path to -L option.
set(USER_LINK_DIRECTORIES
""
)

# Add linker options to be passed, they will be added as extra linker options
# Example : adding -s will pass -s to the linker.

set(USER_LINK_OPTIONS
"")


# For adding pre build step.
# Any script can be used as a pre build step
# Uncomment below section to use the pre-build step.
# Example:  To copy a data file into to a pre-defined location.
#add_custom_command(TARGET gzipApp PRE_BUILD
#COMMAND cp   <source location>  <target location>
#)


# For adding post build step.
# Any script can be used as a post build step, it can take the build output as input.
# Uncomment below section to use the post build step.
# Example:  To copy the binary to a pre-defined location.
#add_custom_command(TARGET gzipApp POST_BUILD
#COMMAND cp  $<TARGET_FILE:gzipApp>  ${CMAKE_SOURCE_DIR}/../
#)

###   END OF USER SETTINGS SECTION ####

####    CAUTION in updating below section    ####
# These setting are required to build the application as per the project template used.
#  Update below only to modify the default settings.

# The sources listed below will be updated automtically, based on changes done to the sources.
# This updation is done as part of the pre-cmake configure step.
# When running cmake without using Vitis-CLI Or Vitis-IDE,
target_sources(copy_buffer
PRIVATE
    libs/common/includes/xcl2/xcl2.cpp
    src/host.cpp
)
get_filename_component(Vitis_Platform
${VITIS_PLATFORM_PATH}
NAME_WE
)
# Below compile definitions are derived from the application template used to
# create this project.Update them to suite your requirement. They will not be
# modified further by the tool.If new compile definitions needed, they can be
# added to USER_COMPILE_DEFINITIONS
target_compile_definitions(copy_buffer
PRIVATE
    __USE_XOPEN2K8
    VITIS_PLATFORM=${Vitis_Platform}
    ${USER_COMPILE_DEFINITIONS}
)
# Compile Options, derived from the application template used to create this
# project.They will not be modified further by the tool.If new compile options
# needed to be added, they can be added to USER_COMPILE_OPTIONS
target_compile_options(copy_buffer
PRIVATE
    -g
    ${USER_COMPILE_OPTIONS}
)
# Include Directories, derived from the application template used to create this
# project.They will not be modified further by the tool.
# If new sources are
# added, the new INCLUDE Directories can be added to USER_INCLUDE_DIRECTORIES
target_include_directories(copy_buffer
PRIVATE
    ../common/libs/common/includes/xcl2
    ${Vitis_INCLUDE_DIRS}
    ${USER_INCLUDE_DIRECTORIES}
)
# Libraries to be linked, derived from the application template used to create
# this project.They will not be modified further by the tool.If new libraries to
# be linked, they can be added to USER_LINK_LIBRARIES.
target_link_libraries(copy_buffer
PRIVATE
    -lpthread
    -lrt
    -lstdc++
    ${Vitis_LIBRARIES}
    ${USER_LINK_LIBRARIES}
)
# Linker Library Search Directories to be passed to linker, derived from the
# application template used to create this project.They will not be modified
# further by the tool.If new library directory to be added, they can be added to
# USER_LINK_DIRECTORIES.
target_link_directories(copy_buffer
PRIVATE
    $ENV{XILINX_XRT}/lib
    ${USER_LINK_DIRECTORIES}
)
# Linker options, derived from the application template used to create this
# project.They will not be modified further by the tool.If new linker options to
# be added, they can be added to USER_LINK_OPTIONS.
target_link_options(copy_buffer
PRIVATE
    ${USER_LINK_OPTIONS}
)
install(TARGETS copy_buffer
EXPORT copy_buffer
DESTINATION ${CMAKE_INSTALL_LIBDIR}
)
